/* Define base address for peripherals */
#define PERIPH_BASE				(0x40000000UL)

/* Define offset for AHB1 bus */
#define AHB1PERIPH_OFFSET		(0x20000UL)

/* Define base address for AHB1 */
#define AHB1PERIPH_BASE			(PERIPH_BASE + AHB1PERIPH_OFFSET)

/* 4 Define offset for GPIOA */
#define GPIOA_OFFSET			(0x0UL)

/* 5 Define base for GPIOA */
#define GPIOA_BASE				(AHB1PERIPH_BASE + GPIOA_OFFSET)

/* 6 Define offset for RCC */
#define RCC_OFFSET				(0x3800UL)

/* Define base for RCC */
#define RCC_BASE				(AHB1PERIPH_BASE + RCC_OFFSET)

/* Define offset for RCC_AHB1ENR */
#define RCC_AHB1ENR_OFFSET		(0x30UL)

/* Define base for RCC_AHB1ENR */
#define RCC_AHB1ENR_BASE		*((volatile unsigned int *)(RCC_BASE + RCC_AHB1ENR_OFFSET))

/* Define offset for GPIOx_MODER register */
#define GPIOA_MODER_OFFSET		(0x0UL)

/* Define base for GPIOx_MODER register */
#define GPIOA_MODER_BASE		*((volatile unsigned int *)(GPIOA_BASE + GPIOA_MODER_OFFSET))

/* Define offset for GPIOx_ODR register */
#define GPIOA_ODR_OFFSET		(0x14UL)

/* Define base for GPIOx_ODR register */
#define GPIOA_ODR_BASE			*((volatile unsigned int *)(GPIOA_BASE + GPIOA_ODR_OFFSET))

/* Bit mask for giving clock access to GPIOA */
#define RCC_GPIOAEN				(1U << 0)

/* Bit mask for GPIOA ping */
#define GPIOA_PIN5				(1U << 5)

/* Alias for PIN5 representing user LED pin */
#define LED_PIN GPIOA_PIN5

int main(void)
{
	/* Enable clock access to GPIOA */
	RCC_AHB1ENR_BASE |= RCC_GPIOAEN;

	/* Configure GPIOA pin 5 as output (01) */
	GPIOA_MODER_BASE |= (1U << 10);
	GPIOA_MODER_BASE &= ~(1U << 11);

	while(1)
	{
		GPIOA_ODR_BASE |= LED_PIN;
	}
}
